/*
     Copyright (C) 2012 Andrew Darqui

     This file is part of darqbot.

     darqbot is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     darqbot is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with darqbot.  If not, see <http://www.gnu.org/licenses/>.

     Contact: [website: http://www.adarq.org]
      email: andrew.darqui@g m a i l . c o m
*/
#ifndef FN_ALL_H
#define FN_ALL_H

int (*fn_bit_extract_bit_char)(unsigned char, int);
int (*fn_bit_pack_bit_char)(unsigned char *, int, int);
int (*fn_bit_pack_bit_char_set)(unsigned char *, int);
int (*fn_bit_pack_bit_char_clr)(unsigned char *, int);
bit_vector_t *(*fn_bit_vec_init)(int);
void (*fn_bit_vec_fini)(bit_vector_t **);
int (*fn_bit_vec_get_and_set)(bit_vector_t *);
void (*fn_bit_vec_clr)(bit_vector_t *, int);
void (*fn_bit_vec_zero)(bit_vector_t *);
void (*fn_bit_vec_set)(bit_vector_t *, int);
int (*fn_bit_vec_get)(bit_vector_t *, int);
int (*fn_bit_vec_scan)(bit_vector_t *, int);
char * (*fn_bit_vec_to_str)(bit_vector_t *);
void (*fn_bit_vec_from_str)(bit_vector_t *, char *);
void (*fn_bit_vec_from_num)(bit_vector_t *, unsigned long);
void (*fn_bit_vec_and)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_or)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_xor)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_not)(bit_vector_t *);
void (*fn_bit_vec_add)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_sub)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_mul)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_div)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_and)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
void (*fn_bit_vec_and)(bit_vector_t *, bit_vector_t *, bit_vector_t *);
int (*fn_bit_vec_3safe)(bit_vector_t *, bit_vector_t *, bit_vector_t *) ;
bot_t *(*fn_bot_init)(void);
int (*fn_bot_line_clear)(bot_t *);
int (*fn_bot_line_clear_bufs)(bot_t *);
void (*fn_bot_fini)(void *);
void (*fn_bot_fini_subs)(void *);
void (*fn_bot_sigend_handler)(int);
void (*fn_bot_atexit_handler)(void);
void (*fn_bot_sigpipe_handler)(int);
void (*fn_bot_sigchld_handler)(int);
void (*fn_bot_sigalrm_handler)(int);
void (*fn_bot_exit_handler)(int);
void (*fn_bot_fini_wrapper)(void);
void (*fn_bot_defaults)(bot_t *);
void (*fn_bot_test_stuff_init)(void);
int (*fn_change_server)(bot_t *);
int (*fn_bot_shouldreturn)(bot_t *);
void (*fn_bot_find_and_set_fd)(char *, int);
int (*fn_bot_parse_tag)(bot_t *, char *, int);
bot_t *(*fn_bot_init_and_turn_on)(char *);
void (*fn_bot_turn_on)(bot_t *, int);
void (*fn_bot_turn_off)(bot_t *);
void (*fn_bot_exchange_data)(bot_t *, bot_t *);
dlist_t *(*fn_bot_sub_add)(bot_t *, bot_t *);
bot_t *(*fn_bot_dup_sub)(bot_t *);
bot_t *(*fn_bot_dup)(bot_t *);
bot_t * (*fn_bot_find_tag)(char *);
bot_t * (*fn_bot_find_sub_by_tag)(bot_t * , char *);
bot_t * (*fn_bot_find_sub_by_id)(bot_t * , int);
pid_t (*fn_bot_fork_clean)(bot_t *);
void (*fn_bot_fork_clean_exit)(bot_t *); 
void (*fn_bot_copy_values)(bot_t * bot, char * nick, char * ident, char * host, char * to, char * in, char * out) ;
dlist_t ** (*fn_bot_all_find_dlist_by_bot_id)(bot_t *, dlist_t **);
bot_t *(*fn_bot_find_all_by_id)(int);
int (*fn_bot_daemon)(int, char **, bot_t **, char *, char *);
size_t (*fn_strlen)(const char *);
int (*fn_true)(void);
int (*fn_false)(void);
int (*fn_val_int)(int);
char * (*fn_val_string)(char *);
void * (*fn_memset)(void *, int , size_t ) ;
void (*fn_bzero)(void *, size_t);
int (*fn_strcmp)(const char *, const char *);
int (*fn_strncmp)(const char *, const char *, size_t);
size_t (*fn_strlcpy)(char *, const char *, size_t);
size_t (*fn_strlcat)(char *, const char *, size_t);
int (*fn_usleep)(useconds_t);
char *(*fn_strdup)(const char *);
int (*fn_strcasecmp)(const char *, const char *);
int (*fn_strncasecmp)(const char *, const char *, size_t);
int (*fn_kill)(pid_t, int);
int (*fn_fileno)(FILE *);
int (*fn_isascii)(int);
int (*fn_setgroups)(size_t, const gid_t *);
void * (*fn_memcpy)(void *, const void *, size_t );
void * (*fn_memset)(void *, int, size_t);
int (*fn_printf)(const char *format, ...);
int (*fn_fprintf)(FILE *stream, const char *format, ...);
int (*fn_snprintf_buf)(char *str, size_t size, const char *format, ...);
int (*fn_vsnprintf_buf)(char *str, size_t size, const char *format, va_list ap);
char *(*fn_strcasestr)(const char *, const char *);
int (*fn_getopt)(int, char * const *, const char *);
FILE *(*fn_fmemopen)(void *, size_t, const char *);
char *(*fn_n_gethostbyname)(char *);
int (*fn_bot_network_raw_connect)(char *, int, int, int);
int (*fn_bot_network_raw_listen)(char *, int);
int (*fn_bot_network_raw_disconnect)(int);
int (*fn_bot_unset_evhooks)(bot_t *);
int (*fn_bot_set_evhooks)(bot_t *, void (*fn)(int, short, void *));
int (*fn_bot_unix_fd_send)(bot_t *, int, bot_gmod_elm_t*);
int (*fn_bot_unix_init)(void);
int (*fn_bot_unix_fini)(void);
void (*fn_bot_evhook_unix_accept)(int, short, void *);
void (*fn_bot_evhook_unix_read)(int, short, void *);
void (*fn_bot_unix_node_destroy)(void *);
char *(*fn_bot_find_confdir)(bot_t *);
int (*fn_conf_parse)(bot_t *);
int (*fn_bot_parse_logfile)(bot_t *, char *, int);
int (*fn_bot_parse_trace)(bot_t *, char *, int);
int (*fn_bot_parse_debug)(bot_t *, char *, int);
int (*fn_bot_parse_pmodules)(bot_t *, char *, int);
int (*fn_bot_parse_gmodules)(bot_t *, char *, int, char *);
void (*fn_conf_fix)(bot_t *);
char *(*fn_conf_get_proto)(int);
char *(*fn_conf_get_type)(int);
void (*fn_bot_evhook_console)(int, short, void *);
void (*fn_console_info_print)(bot_t *);
void (*fn_console_xmodreload)(int, char *);
void (*fn_console_xmodunload)(int, char *);
void (*fn_console_xmodload)(int, char *);
void (*fn_console_modreload)(char *);
void (*fn_console_modunload)(char *);
void (*fn_console_modload)(char *);
void (*fn_console_pmodreload)(char *);
void (*fn_console_pmodunload)(char *);
void (*fn_console_pmodload)(char *);
void (*fn_console_gmodreload)(char *);
void (*fn_console_gmodunload)(char *);
void (*fn_console_gmodload)(char *);
void (*fn_bot_evhook_console)(int, short, void *);
int (*fn_bot_help_console)(bot_t *);
void (*fn_console_info)(bot_t *, char *);
void (*fn_console_info_print)(bot_t *);
void (*fn_console_tag_pare)(bot_t *, char *);
void (*fn_console_parse)(bot_t *, char *);
void (*fn_console_print_all)(int);
void (*fn_console_print_all_bot)(bot_t *, int);
control_t *(*fn_control_init)(void);
control_sub_t *(*fn_control_sub_init)(void);
dlist_t *(*fn_control_add_fdpass)(control_t , int);
int (*fn_control_get_fdpass)(dlist_t **);
int (*fn_control_get_fdpass_find)(dlist_t **);
dlist_t * (*fn_control_bot_add)(bot_t *, control_t *);
void (*fn_control_bot_del)(bot_t *, dlist_t *);
void (*fn_control_fini)(void *);
void (*fn_control_sub_fini)(void *);
bot_t * (*fn_environ_set)(bot_t *, char *, char *);
bot_t *(*fn_environ_set_withnum)(bot_t *, int, char *);
char *(*fn_environ_get)(bot_t *, char *);
bot_t * (*fn_environ_unset)(bot_t *, char *);
bot_t *(*fn_environ_destroy)(bot_t *);
bot_t *(*fn_environ_destroy_args)(bot_t *);
bot_t *(*fn_environ_add_args1)(bot_t *, char *, char *);
bot_t * (*fn_environ_debugprint)(bot_t *);
char *(*fn_environ_sub_envs)(bot_t *, char *);
fd_link_t * (*fn_fd_link_add)(dlist_t **, int, struct event, struct sockaddr_in *, struct sockaddr_un *);
fd_link_t * (*fn_fd_link_find)(dlist_t **, int);
int (*fn_fd_link_del)(dlist_t **, int, void (*cleanup)(fd_link_t *));
void (*fn_fd_link_destroy)(dlist_t **, void (*cleanup)(fd_link_t *));
void (*fn_fd_link_cleanup)(fd_link_t *);
void (*fn_fd_link_set_cur)(dlist_t **, fd_link_t *, int);
void (*fn_fd_link_print)(fd_link_t *);
char *(*fn_fd_link_get_latest_host)(bot_t *, char *, char *);
dlist_t *(*fn_files_get_listing)(bot_t *, char *, int);
void (*fn_files_get_listing_run)(bot_t *, char *, int, dlist_t **);
void (*fn_files_destroy)(bot_t *, dlist_t **);
void (*fn_global_defaults)(void);
void (*fn_global_conf_parse)(void);
char *(*fn_global_conf_dir)(void);
int (*fn_global_chroot)(void);
int (*fn_chroot)(const char *);
int (*fn_setreuid)(uid_t, uid_t );
int (*fn_setregid)(gid_t , gid_t);
void (*fn_global_core_unlimited)(void);
void (*fn_global_signal_hooks)(void);
void (*fn_global_signal_exit_hooks)(void);
void (*fn_global_on)(void);
void (*fn_global_off)(void);
void (*fn_global_fork_clean_stuff)(void);
int (*fn_global_parse_chroot)(char *, int);
int (*fn_global_parse_modules)(char *, int);
int (*fn_global_parse_pmodules)(char *, int);
int (*fn_global_parse_gmodules)(char *, int);
int (*fn_global_parse_trace)(char *, int);
int (*fn_global_parse_debug)(char *, int);
int (*fn_global_parse_sigprotect)(char *, int);
int (*fn_global_parse_timer_sort)(char *, int);
int (*fn_global_parse_timer_sleep)(char *, int);
int (*fn_global_parse_fd_unix_path) (char *, int );
void (*fn_global_signal_hooks_child)(void);
void (*fn_global_set_proc_ptrs)(int *, char **, char **);
void (*fn_global_getopt)(int, char **);
module_t *(*fn_gmodule_load)(char *);
module_t *(*fn_gmodule_unload)(module_t *);
void (*fn_gmodule_iolist)(void);
void (*fn_gmodule_timerlist)(void);
void (*fn_gmodule_list)(void);
char *(*fn_gmodule_path)(char *);
void (*fn_gmodule_load_all)(void);
void (*fn_bot_gxmodule_free)(void *);
bot_t *(*fn_gmodule_unload_all)(void);
void (*fn_bot_gmodule_run_stack)(bot_t *);
void (*fn_bot_gmodule_run_stack_new)(bot_t *);
void (*fn_bot_gmodule_run_stack_once)(bot_t *);
void (*fn_bot_gmodule_run_stack_new_once)(bot_t *);
void (*fn_bot_gmodule_elm_free)(void *);
void (*fn_bot_gmodule_run_control)(bot_t *, int, ...);
int (*fn_gmodule_up)(dlist_t *, bot_t *);
int (*fn_gmodule_down)(dlist_t *, bot_t *);
int (*fn_gmodule_destroy_up)(dlist_t *, bot_t *);
int (*fn_gmodule_destroy_down)(dlist_t *, bot_t *);
int (*fn_gmodule_control_up)(dlist_t *, bot_t *);
int (*fn_gmodule_control_down)(dlist_t *, bot_t *);
int (*fn_gmodule_up_then_down)(dlist_t *, bot_t *);
void (*fn_gmodule_fix_data_up)(bot_t *);
void (*fn_gmodule_fix_data_down)(bot_t *);
void (*fn_gmodule_fix_data_out_to_in)(bot_t *);
void (*fn_gmodule_fix_data_in_to_out)(bot_t *);
bot_gmod_elm_t * (*fn_gmodule_get_gmod)(dlist_t *);
bot_gmod_elm_t * (*fn_gmodule_get_gmod_next)(dlist_t *);
void (*fn_gmodule_update)(module_t *, char *);
dlist_t *(*fn_gmodule_find_by_trig_dptr)(char *);
module_t *(*fn_gmodule_find_by_trig)(char *);
module_t *(*fn_gmodule_find_by_name)(char *);
void (*fn_gmodule_lock)(char *);
void (*fn_gmodule_unlock)(char *);
bot_gmod_elm_t *(*fn_gmodule_find_gmod)(bot_t *, char *, char *);
dlist_t *(*fn_gmodule_find_gmod_dptr)(bot_t *, char *, char *);
bot_gmod_elm_t *(*fn_gmodule_find_latest_gmod)(bot_t *, char *, char *);
dlist_t *(*fn_gmodule_find_latest_gmod_dptr)(bot_t *, char *, char *);
void (*fn_gmodule_gmod_print)(bot_gmod_elm_t *);
void (*fn_gmodule_update_stats)(void);
void (*fn_gmodule_sort)(void);
dlist_t *(*fn_bot_gmodule_dup_bot_gmodules)(bot_t *);
void (*fn_gmodule_off)(bot_t *);
void (*fn_gmodule_off_bot)(bot_t *);
void (*fn_gmodule_set_can_pass_up)(bot_gmod_elm_t *);
void (*fn_gmodule_set_can_pass_down)(bot_gmod_elm_t *);
void (*fn_gmodule_set_has_run)(bot_gmod_elm_t*);
dlist_t *(*fn_gmod_cache_enqueue)(dlist_t **, int ,char *, int);
bot_gmod_cache_elm_t * (*fn_gmod_cache_dequeue)(dlist_t **);
void (*fn_gmod_cache_free)(void *);
void (*fn_gmodule_keepalive_on)(bot_t *);
void (*fn_gmodule_keepalive_off)(bot_t *);
void (*fn_gmodule_parse_common_options)(bot_t *, bot_gmod_elm_t *, char *);
int (*fn_gmodule_up_force)(dlist_t *, bot_t *);
int (*fn_gmodule_down_force)(dlist_t *, bot_t *);
void (*fn_gxmodule_free)(void *);
int (*fn_matchchar)(int, int);
int (*fn_matchchar_str)(char *);
int (*fn_matchchar_seed)(int);
char *(*fn_matchchar_retstr)(int);
     size_t (*fn_strlcpy_safe)(char *, const char *, size_t);
     size_t (*fn_strlcat_safe)(char *, const char *, size_t);
char * (*fn_sNULL)(char *);
int (*fn_vsnprintf_safe)(char *, size_t , const char *, va_list);
char * (*fn_str_unite)(const char * msg, ...);
char *(*fn_str_unite_static)(const char *, ...);
char * (*fn_str_unite_foralloc)(const char * msg, ...);
int (*fn_strstrip_nl) (char *);
char * (*fn_eat_whitespace)(char *);
int (*fn_strstrip_chars)(char *, char *);
char * (fn_strtokpos)(char *, int );
int (*fn_strcasecmp_len)(const char *, const char *);
int (*fn_strlcatfmt_safe)(char *, int, char *, ...);
char *(*fn_strstr_len)(char *, char *, int);
int (*fn_strlcat_bot_safe)(char *, char *, int);
int (*fn_strlcatfmt_bot_safe)(char *, int, char *, ...);
int (*fn_strprepend_bot_safe)(char *, char *, int);
char *(*fn_strdup_char)(char);
char *(*fn_strdup_int)(int);
char *(*fn_strdup_len)(char *, int);
int (*fn_charcat_safe)(char *, char, int);
int (*fn_charcat_bot_safe)(char *, char, int);
char *(*fn_strtok_nonalpha)(char *);
char *(*fn_strtokdup_str)(char *, char *);
char *(*fn_xstrcasestr)(char *, char *);
char *(*fn_strcasestr_len)(char *, char *, int);
char *(*fn_strcasestr2)(char *, char *);
char *(*fn_strcasestr_unique)(char *, char *);
char *(*fn_strzero_bot_safe)(char *, size_t);
char *(*fn_str_find_sep)(char *);
int (*fn_str_clean_sep)(char *);
int (*fn_str_clean_sep_shrink)(char *, int);
int (*fn_str_transform_pipes)(char *);
int (*fn_str_untransform_pipes)(char *);
char *(*fn_strtokbionic)(char *, const char *, int *);
 char *(*fn_strtokbionic_nonalpha)(char *, int *);
int (*fn_str_clean_nl)(char *, int);
int (*fn_snprintf_safe)(char *,size_t, const char *, ...);
int (*fn_capsup)(char *);
int (*fn_capsdown)(char *);
int (*fn_str_isclean)(char *, int (*fn)(int));
int (*fn_str_apply)(char *,int(*fn)(int));
int (*fn_str_apply_is)(char *, int (*fn)(int));
int (*fn_iskeychars)(int );
int (*fn_ctoi)(int);
int (*fn_itoc)(int);
char *(*fn_itostr)(int);
void *(*fn_memcopy)(char *, char *, size_t, size_t);
int (*fn_str_shrink_quotes)(char *);
int (*fn_isbinary)(int );
int (*fn_memcpy_bot_safe)(char *, int, char *, int);
char *(*fn_strrchr_len)(const char *, int, int);
int (*fn_str_last_char_replace)(char *, int, int);
int (*fn_str_has_newline)(char *);
int (*fn_str_shrink_chars)(char *, char *);
int (*fn_str_shrink_spaces_to_one)(char *);
int (*fn_str_shrink_chars_and_replace)(char *, char *, char );
int (*fn_str_sum)(char *);
int (*fn_MAX_FMT)(char *, ...);
char * (*fn_strchr_str)(const char *, const char *, int *);
char * (*fn_str_replace)(char *, char *, char *);
int (*fn_istrig)(int);
int (*fn_isprog)(int);
char *(*fn_ret_trig)(char *);
int (*fn_dl_str_unite)(dlist_t **, const char *, ...);
int (*fn_dl_str_dup)(dlist_t **, const char *);
void (*fn_dl_str_debug)(dlist_t **);
void (*fn_dl_str_print)(dlist_t **);
void (*fn_dl_str_destroy)(dlist_t **);
char *(*fn_str_create_spaces)(int);
char *(*fn_str_match)(const char *, int, int, ...);
int (*fn_strstrip_chars_fmt)(char *, int, ...);
int (*fn_seg)(void *);
memdup_t *(*fn_memdup)(char *, int);
void (*fn_memdup_free)(void *);
module_t  *(*fn_module_load)(char *);
module_t *(*fn_module_unload)(module_t *);
void (*fn_module_timerlist)(void);
void (*fn_module_iolist)(void);
void (*fn_module_list)(void);
char *(*fn_module_path)(char *);
void (*fn_module_load_all)(void);
void (*fn_module_deactivate_dptr)(void *);
void (*fn_module_deactivate)(void *);
void (*fn_xmodule_free_destroy)(void *);
bot_t *(*fn_module_unload_all)(void);
void (*fn_module_add_subtrigs)(module_t *, char *);
void (*fn_module_update)(module_t *, char *);
dlist_t *(*fn_module_find_by_trig_dptr)(char *);
module_t *(*fn_module_find_by_trig)(char *);
module_t *(*fn_module_find_by_name)(char *);
void (*fn_module_lock)(char *);
void (*fn_module_unlock)(char *);
void (*fn_module_update_stats)(void);
void (*fn_module_sort)(void);
void (*fn_modules_off)(void);
bot_t *(*fn_mongodb_init)(bot_t *);
bot_t *(*fn_mongodb_fini)(bot_t *);
int (*fn_mongodb_insert_key)(bot_t *, char *, char *, char *, char *, ...);
char *(*fn_mongodb_retrieve_key)(bot_t *, char *, char *, char *);
int (*fn_mongodb_remove_key)(bot_t *, char *, char *);
int (*fn_mongodb_insert_key_stat)(bot_t *, char *, char *, int);
int (*fn_mongodb_retrieve_key_stat)(bot_t *, char *, char *);
int (*fn_mongodb_update_key_stat)(bot_t *, char *, char *, int);
dlist_t *(*fn_mongodb_dump_keyvalue)(bot_t *, char *);
void (*fn_mongodb_destroy_keyvalue)(bot_t *, dlist_t **);
void (*fn_mongodb_free_keyvalue)(void *);
mongo_argument_t ** (*fn_mongodb_fmt_retrieve)(bot_t *, char *, mongo_argument_t *);
int (*fn_mongodb_arg_destroy)(bot_t *, mongo_argument_t **);
void (*fn_mongodb_arg_free)(void *);
void (*fn_mongodb_arg_print)(bot_t *, mongo_argument_t **);
void (*fn_mongodb_arg_print_arg)(mongo_argument_t *);
mongo_argument_t ** (*fn_mongodb_fmt_build_strings)(bot_t *, char *);
mongo_argument_t ** (*fn_mongodb_fmt_build_fmt)(bot_t *, char *, ...);
int (*fn_mongodb_fmt_insert_arg)(bot_t *, char *, mongo_argument_t **);
bson *(*fn_mongodb_bson_build)(bot_t *, char *, ...);
int (*fn_mongodb_bson_insert)(bot_t *, char *, bson *);
void (*fn_mongodb_bson_unfinished)(bson *);
char *(*fn_mongodb_bson_dump)(bson *);
char *(*fn_mongodb_bson_print_init)(const bson *);
void (*fn_mongodb_bson_print)(const bson *);
void (*fn_mongodb_bson_print_raw)(const char *, int);
bson * (*fn_mongodb_bson_get)(bot_t *, char *, char *, int, void *);
void (*fn_mongodb_drop_db)(char *);
int (*fn_sig_stoi)(char *);
char *(*fn_sig_itos)(int);
int (*fn_close_io_descriptors)(char *);
int (*fn_xdaemon)(int, int);
void (*fn_xsetproctitle)(char *);
char *(*fn_random_data)(int);
void (*fn_clean_environ)(void);
module_t *(*fn_pmodule_load)(char *);
module_t *(*fn_pmodule_unload)(module_t *);
void (*fn_pmodule_iolist)(void);
void (*fn_pmodule_timerlist)(void);
void (*fn_pmodule_list)(void);
char * (*fn_pmodule_path)(char *);
void (*fn_pmodule_load_all)(void);
void (*fn_bot_pxmodule_free)(void *);
bot_t *(*fn_pmodule_unload_all)(void);
void (*fn_pmodule_update)(module_t *, char *);
dlist_t *(*fn_pmodule_find_by_trig_dptr)(char *);
module_t *(*fn_pmodule_find_by_trig)(char *);
module_t *(*fn_pmodule_find_by_name)(char *);
void (*fn_pmodule_cur_set)(bot_t *(*fn)(dlist_t *, bot_t *), dlist_t *, bot_t *);
void (*fn_pmodule_cur_clear)(void);
bot_t *(*fn_pmodule_cur_run)(void);
bot_t *(*fn_pmodule_cur_run2)(bot_t *);
void (*fn_pmodule_lock)(char *);
void (*fn_pmodule_unlock)(char *);
void (*fn_pmodule_update_stats)(void);
void (*fn_pmodule_sort)(void);
void (*fn_nick_free)(void *);
void (*fn_server_free)(void *);
void (*fn_channel_free)(void *);
void (*fn_nick_add)(bot_t *, char *, char * , char *, char *, char *);
dlist_t *(*fn_chan_find)(bot_t *, char *);
dlist_t *(*fn_chan_del_user)(bot_t *, dlist_t *, char *);
dlist_t *(*fn_chan_add_user)(bot_t *, dlist_t *, char *);
dlist_t *(*fn_chan_find_user)(bot_t *, dlist_t *, char *);
bot_t *(*fn_chan_find_tag)(char *);
int (*fn_randchar)(int, int);
int (*fn_randchar_str)(char *);
int (*fn_randchar_seed)(int);
char *(*fn_randchar_retstr)(int);
int (*fn_relink_req_pack_buf)(char *, int, int, int, int);
int (*fn_relink_req_pack_buf_hello)(char *, int);
int (*fn_relink_pack_buf_relink)(char *, int, char *, int, int, int);
int (*fn_relink_req_pack_buf_relink_new)(char *, int, char *);
int (*fn_relink_req_pack_buf_query)(char *, int, int);
int (*fn_relink_req_pack_buf_query_links)(char *, int);
int (*fn_relink_req_pack_buf_query_subs)(char *, int);
int (*fn_relink_req_pack_buf_query_reload)(char *, int);
int (*fn_relink_req_pack_buf_destroy_link)(char *, int, int);
int (*fn_relink_req_pack_buf_destroy_sub)(char *, int, int);
int (*fn_relink_req_pack_buf_destroy_all)(char *, int);
int (*fn_relink_req_pack_buf_reload)(char *);
int (*fn_relink_res_pack_buf)(char *, int, int, int);
int (*fn_relink_res_pack_buf_new)(char *, int);
int (*fn_relink_res_pack_buf_old)(char *, int);
int (*fn_relink_res_pack_buf_error)(char *, int );
int (*fn_relink_res_buf_result_string)(char *, int, char *);
int (*fn_relink_find_buf_result_string)(char *, int, char **, int *);
int (*fn_relink_pack_buf_data)(char *, int, char *, int);
int (*fn_relink_find_buf_data)(char *, int, char **, int *);
void (*fn_relink_packet_print)(char *, relink_control_pkt_t *);
void (*fn_relink_packet_ntoh)(relink_control_pkt_t *);
void (*fn_packet_relink_hton)(relink_control_pkt_t *);
int (*fn_relink_ispacket)(relink_control_pkt_t *);
int (*fn_relink_packet_len)(char *);
dlist_t * (*fn_relink_buf_to_dlist)(char *, int);
int (*fn_safe_close)(int);
void (*fn_safe_event_set)(struct event *, int , short , void (*fn)(int, short, void *), void *) ;
int (*fn_safe_event_add)(struct event *, struct timeval *) ;
int (*fn_safe_event_del)(struct event *);
int (*fn_stat_inc)(bot_t *, char *);
int (*fn_stat_retcnt)(bot_t *, char *);
void (*fn_timer_handler)(int);
void (*fn_timer_handler_new)(int);
void (*fn_timer_set)(void);
void (*fn_timer_unset)(void);
void (*fn_timer_shouldwerun)(void);
dlist_t * (*fn_tokenize)(bot_t *, char *, int , char *);
void (*fn_tokenize_destroy)(bot_t *, dlist_t **);
char **(*fn_tokenize_array)(bot_t *, char *, int, char *, int *);
void (*fn_tokenize_destroy_array)(bot_t *, char **);
char *(*fn_tokenize_find_closing_bracket)(char *, int);
char *(*fn_tokenize_find_inside_of_brackets)(char *, int);
char ** (*fn_tokenize_str2argv)(char *, int *, int);
unique_t *(*fn_unique_create)(bot_t *, dlist_t **, int);
unique_t * (*fn_unique_find)(bot_t *, dlist_t **);
void *(*fn_unique_get)(bot_t *, dlist_t **);
unique_t * (*fn_unique_delete)(bot_t *, dlist_t **, void (*)(void *));
void (*fn_unique_free)(void *);
void (*fn_unique_destroy)(bot_t *, dlist_t **, void (*)(void *));
char *(*fn_unique_bu2str)(unique_t *,int);
DB *(*fn_xdb_open)(char *);
int (*fn_xdb_write)(DB *, char *, char *);
void (*fn_xdb_fini)(DB *);
xdb_pair_t *(*fn_xdb_get)(DB *, char *);
xdb_pair_t * (*fn_xdb_get_recnum)(DB *, int);
int (*fn_xdb_count)(DB *);
xdb_pair_t *(*fn_xdb_pair_create)(char *, int, char *, int);
void (*fn_xdb_pair_destroy)(void *);
xdb_pair_t *(*fn_xdb_pair_find_by_key)(dlist_t *, char *);
module_t *(*fn_xmodule_load)(int, char *);
module_t *(*fn_xmodule_unload)(int,module_t *,char *);
void (*fn_xmodule_list)(int );
void (*fn_xmodule_iolist)(int);
void * (*fn_xmodule_iolist_traverse)(void *, void *);
void (*fn_xmodule_timerlist)(int);
void * (*fn_xmodule_timerlist_traverse)(void *, void *);
void (*fn_xmodule_load_all)(int);
bot_t *(*fn_xmodule_unload_all)(int);
char * (*fn_xmodule_path)(int, char *);
module_t *(*fn_xmodule_find_by_trig)(int, char *);
dlist_t *(*fn_xmodule_find_by_trig_dptr)(int, char *);
module_t *(*fn_xmodule_find_by_name)(int, char *);
void (*fn_xmodule_update)(int, module_t *, char *);
void (*fn_xmodule_lock)(int, char *);
void (*fn_xmodule_unlock)(int, char *);
void (*fn_xmodule_unload_everything)(void);
void (*fn_xmodule_update_stats)(int);
void (*fn_xmodule_sort)(int);
void *(*fn_xmodule_sort_traverse)(void *, void *);
void (*fn_xmodule_parse_style)(char *);
int (*fn_xmodule_avl_compare)(const void *, const void *, void *);
void (*fn_xmodule_avl_free)(void *, void *);
void *(*fn_xmodule_tree_match_by_name)(void *, void *);
void * (*fn_xmodule_tree_print_node)(void *);
void (*fn_xmodule_del_timer)(char *);
dlist_t *(*fn_xmodule_find_timer)(char *);
void (*fn_xmodule_add_timer)(module_t *);
void (*fn_xmodule_del_timer)(char *);
dlist_t *(*fn_xmodule_find_iohook)(char *);
void (*fn_xmodule_add_iohook)(module_t *);
void (*fn_xmodule_del_iohook)(char *);
module_t *(*fn_xmodule_dup_mirror)(module_t *, char *, char *, char *);
void (*fn_xmodule_add_subtrigs)(module_t *);
void *(*fn_xmodule_list_traverse)(void *, void *);
dlist_t ** (*fn_xmodule_type_to_dl)(int);
dlist_t ** (*fn_xmodule_typeio_to_dl)(int);
dlist_t ** (*fn_xmodule_typetimer_to_dl)(int);
void * (*fn_xmodule_unload_traverse)(void *, void *);
void *(*fn_xmodule_traverse_unload_all)(void *, void *);
dlist_t *(*fn_xmodule_insert)(dlist_t **, module_t *);
void (*fn_xmodule_zero)(module_t *);
xpid_t *(*fn_xpid_add)(bot_t *, pid_t );
void (*fn_xpid_destroy)(bot_t *, int);
void (*fn_xpid_del)(bot_t *, pid_t);
void (*fn_xpid_free)(void *);
void (*fn_xpid_console_print)(bot_t *, char *);
void (*fn_xpid_waitpid)(void);
void (*fn_console_zmodreload)(char *);
void (*fn_console_zmodunload)(char *);
void (*fn_console_zmodload)(char *);
void (*fn_zmodule_iolist)(void);
void (*fn_zmodule_timerlist)(void);
void (*fn_zmodule_list)(void);
void (*fn_zmodule_lock)(void);
void (*fn_zmodule_unlock)(void);
void (*fn_zmodule_unload_all_except)(char *, ...);
void (*fn_zmodule_lock_arg)(char *);
void (*fn_zmodule_unlock_arg)(char *);
void (*fn_zmodule_prune)(void);


#endif
