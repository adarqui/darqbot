MOV:::Move data between general-purpose registers; move data between memory and general-purpose or segment registers; move immediates to general-purpose registers
CMOVE^^^CMOVZ:::Conditional move if equal/Conditional move if zero
CMOVNE^^^CMOVNZ:::Conditional move if not equal/Conditional move if not zero
CMOVA^^^CMOVNBE:::Conditional move if above/Conditional move if not below or equal
CMOVAE^^^CMOVNB:::Conditional move if above or equal/Conditional move if not below
CMOVB^^^CMOVNAE:::Conditional move if below/Conditional move if not above or equal
CMOVBE^^^CMOVNA:::Conditional move if below or equal/Conditional move if not above
CMOVG^^^CMOVNLE:::Conditional move if greater/Conditional move if not less or equal
CMOVGE^^^CMOVNL:::Conditional move if greater or equal/Conditional move if not less
CMOVL^^^CMOVNGE:::Conditional move if less/Conditional move if not greater or equal
CMOVLE^^^CMOVNG:::Conditional move if less or equal/Conditional move if not greater
CMOVC:::Conditional move if carry
CMOVNC:::Conditional move if not carry
CMOVO:::Conditional move if overflow
CMOVNO:::Conditional move if not overflow
CMOVS:::Conditional move if sign (negative)
CMOVNS:::Conditional move if not sign (non-negative)
CMOVP^^^CMOVPE:::Conditional move if parity/Conditional move if parity even
CMOVNP^^^CMOVPO:::Conditional move if not parity/Conditional move if parity odd
XCHG:::Exchange
BSWAP:::Byte swap
XADD:::Exchange and add
CMPXCHG:::Compare and exchange
CMPXCHG8B:::Compare and exchange 8 bytes
PUSH:::Push onto stack
POP:::Pop off of stack
PUSHA^^^PUSHAD:::Push general-purpose registers onto stack
POPA^^^POPAD:::Pop general-purpose registers from stack
CWD^^^CDQ:::Convert word to doubleword/Convert doubleword to quadword
CBW^^^CWDE:::Convert byte to word/Convert word to doubleword in EAX register
MOVSX:::Move and sign extend
MOVZX:::Move and zero extend
ADD:::                 Integer add
ADC:::              Add with carry
SUB:::              Subtract
SBB:::                 Subtract with borrow
IMUL:::                Signed multiply
MUL:::                 Unsigned multiply
IDIV:::                Signed divide
DIV:::                 Unsigned divide
INC:::                 Increment
DEC:::                 Decrement
NEG:::                 Negate
CMP:::                 Compare
DAA:::                 Decimal adjust after addition
DAS:::                 Decimal adjust after subtraction
AAA:::                 ASCII adjust after addition
AAS:::                 ASCII adjust after subtraction
AAM:::                 ASCII adjust after multiplication
AAD:::                 ASCII adjust before division
AND:::                 Perform bitwise logical AND
OR:::                  Perform bitwise logical OR
XOR:::                 Perform bitwise logical exclusive OR
NOT:::                 Perform bitwise logical NOT
SAR:::                  Shift arithmetic right
SHR:::                  Shift logical right
SAL^^^SHL:::              Shift arithmetic left/Shift logical left
SHRD:::                 Shift right double
SHLD:::                 Shift left double
ROR:::                  Rotate right
ROL:::                  Rotate left
RCR:::                  Rotate through carry right
RCL:::                  Rotate through carry left
BT:::                   Bit test
BTS:::                  Bit test and set
BTR:::                  Bit test and reset
BTC:::                  Bit test and complement
BSF:::                  Bit scan forward
BSR:::                  Bit scan reverse
SETE^^^SETZ:::            Set byte if equal/Set byte if zero
SETNE^^^SETNZ:::          Set byte if not equal/Set byte if not zero
SETA^^^SETNBE:::          Set byte if above/Set byte if not below or equal
SETAE^^^SETNB^^^SETNC::: Set byte if above or equal/Set byte if not below/Set byte if not carry
SETB^^^SETNAE^^^SETC::: Set byte if below/Set byte if not above or equal/Set byte if carry
SETBE^^^SETNA:::          Set byte if below or equal/Set byte if not above
SETG^^^SETNLE:::          Set byte if greater/Set byte if not less or equal
SETGE^^^SETNL:::          Set byte if greater or equal/Set byte if not less
SETL^^^SETNGE:::          Set byte if less/Set byte if not greater or equal
SETLE^^^SETNG:::          Set byte if less or equal/Set byte if not greater
SETS:::                 Set byte if sign (negative)
SETNS:::                Set byte if not sign (non-negative)
SETO:::                 Set byte if overflow
SETNO:::               Set byte if not overflow
SETPE^^^SETP:::          Set byte if parity even/Set byte if parity
SETPO^^^SETNP:::         Set byte if parity odd/Set byte if not parity
TEST:::                Logical compare
JMP:::                 Jump
JE^^^JZ:::               Jump if equal/Jump if zero
JNE^^^JNZ:::             Jump if not equal/Jump if not zero
JA^^^JNBE:::             Jump if above/Jump if not below or equal
JAE^^^JNB:::             Jump if above or equal/Jump if not below
JB^^^JNAE:::             Jump if below/Jump if not above or equal
JBE^^^JNA:::             Jump if below or equal/Jump if not above
JG^^^JNLE:::             Jump if greater/Jump if not less or equal
JGE^^^JNL:::             Jump if greater or equal/Jump if not less
JL^^^JNGE:::             Jump if less/Jump if not greater or equal
JLE^^^JNG:::             Jump if less or equal/Jump if not greater
JC:::                  Jump if carry
JNC:::                 Jump if not carry
JO:::                  Jump if overflow
JNO:::                 Jump if not overflow
JS:::                  Jump if sign (negative)
JNS:::                 Jump if not sign (non-negative)
JPO^^^JNP:::             Jump if parity odd/Jump if not parity
JPE^^^JP:::              Jump if parity even/Jump if parity
JCXZ^^^JECXZ:::          Jump register CX zero/Jump register ECX zero
LOOP:::                Loop with ECX counter
LOOPZ^^^LOOPE:::         Loop with ECX and zero/Loop with ECX and equal
LOOPNZ^^^LOOPNE:::       Loop with ECX and not zero/Loop with ECX and not equal
CALL:::                Call procedure
RET:::                 Return
IRET:::                Return from interrupt
INT:::                 Software interrupt
INTO:::                Interrupt on overflow
BOUND:::               Detect value out of range
ENTER:::               High-level procedure entry
LEAVE:::               High-level procedure exit
MOVS^^^MOVSB:::          Move string/Move byte string
MOVS^^^MOVSW:::          Move string/Move word string
MOVS^^^MOVSD:::          Move string/Move doubleword string
CMPS^^^CMPSB:::          Compare string/Compare byte string
CMPS^^^CMPSW:::          Compare string/Compare word string
CMPS^^^CMPSD:::          Compare string/Compare doubleword string
SCAS^^^SCASB:::          Scan string/Scan byte string
SCAS^^^SCASW:::          Scan string/Scan word string
SCAS^^^SCASD:::          Scan string/Scan doubleword string
LODS^^^LODSB:::          Load string/Load byte string
LODS^^^LODSW:::          Load string/Load word string
LODS^^^LODSD:::          Load string/Load doubleword string
STOS^^^STOSB:::          Store string/Store byte string
STOS^^^STOSW:::          Store string/Store word string
STOS^^^STOSD:::          Store string/Store doubleword string
REP:::                 Repeat while ECX not zero
REPE^^^REPZ:::           Repeat while equal/Repeat while zero
REPNE^^^REPNZ:::         Repeat while not equal/Repeat while not zero
IN:::                  Read from a port
OUT:::                 Write to a port
INS^^^INSB:::            Input string from port/Input byte string from port
INS^^^INSW:::            Input string from port/Input word string from port
INS^^^INSD:::            Input string from port/Input doubleword string from port
OUTS^^^OUTSB:::          Output string to port/Output byte string to port
OUTS^^^OUTSW:::          Output string to port/Output word string to port
OUTS^^^OUTSD:::          Output string to port/Output doubleword string to port
STC:::                  Set carry flag
CLC:::                  Clear the carry flag
CMC:::                  Complement the carry flag
CLD:::                  Clear the direction flag
STD:::                  Set direction flag
LAHF:::                 Load flags into AH register
SAHF:::                 Store AH register into flags
PUSHF^^^PUSHFD:::         Push EFLAGS onto stack
POPF^^^POPFD:::           Pop EFLAGS from stack
STI:::                  Set interrupt flag
CLI:::                  Clear the interrupt flag
LDS:::                  Load far pointer using DS
LES:::                  Load far pointer using ES
LFS:::                  Load far pointer using FS
LGS:::                  Load far pointer using GS
LSS:::                  Load far pointer using SS
LEA:::                  Load effective address
NOP:::                  No operation
UD2:::                    Undefined instruction
XLAT^^^XLATB:::             Table lookup translation
CPUID:::                  Processor identification
MOVBE:::                  Move data after swapping data bytes
RDRAND::: retrieves a random number generated from hardware.
CRC32:::               Provides hardware acceleration to calculate cyclic redundancy checks for fast and efficient implementation of data integrity protocols.
POPCNT:::              This instruction calculates of number of bits set to 1 in the second operand (source) and returns the count in the first operand (a destination register)
AESDEC:::              Perform an AES decryption round using an 128-bit state and a round key
AESDECLAST:::          Perform the last AES decryption round using an 128-bit state and a round key
AESENC:::              Perform an AES encryption round using an 128-bit state and a round key
AESENCLAST:::           Perform the last AES encryption round using an 128-bit state and a round key
AESIMC:::               Perform an inverse mix column transformation primitive
AESKEYGENASSIST::: Assist the creation of round keys with a key expansion schedule
PCLMULQDQ:::            Perform carryless multiplication of two 64-bit numbers
LGDT:::                 Load global descriptor table (GDT) register
SGDT:::                 Store global descriptor table (GDT) register
LLDT:::                 Load local descriptor table (LDT) register
SLDT:::                 Store local descriptor table (LDT) register
LTR:::                  Load task register
STR:::                  Store task register
LIDT:::                 Load interrupt descriptor table (IDT) register
SIDT:::                 Store interrupt descriptor table (IDT) register
MOV:::                 Load and store control registers
LMSW:::                 Load machine status word
SMSW:::                 Store machine status word
CLTS:::                 Clear the task-switched flag
ARPL:::                 Adjust requested privilege level
LAR:::                  Load access rights
LSL:::                  Load segment limit
VERR:::                 Verify segment for reading
VERW:::                 Verify segment for writing
MOV:::                  Load and store debug registers
INVD:::                 Invalidate cache, no writeback
WBINVD:::               Invalidate cache, with writeback
INVLPG:::               Invalidate TLB Entry
INVPCID:::              Invalidate Process-Context Identifier
LOCK (prefix):::        Lock Bus
HLT:::                  Halt processor
RSM:::                  Return from system management mode (SMM)
RDMSR:::                Read model-specific register
WRMSR:::                Write model-specific register
RDPMC:::                Read performance monitoring counters
RDTSC:::                Read time stamp counter
RDTSCP:::               Read time stamp counter and processor ID
SYSENTER:::            Fast System Call, transfers to a flat protected mode kernel at CPL = 0
SYSEXIT:::             Fast System Call, transfers to a flat protected mode kernel at CPL = 3
XSAVE:::               Save processor extended states to memory
XSAVEOPT:::            Save processor extended states to memory, optimized
XRSTOR:::              Restore processor extended states from memory
XGETBV:::              Reads the state of an extended control register
XSETBV:::              Writes the state of an extended control register
RDFSBASE:::            Reads from FS base address at any privilege level
RDGSBASE:::            Reads from GS base address at any privilege level
WRFSBASE:::            Writes to FS base address at any privilege level
WRGSBASE:::            Writes to GS base address at any privilege level
EAX:::Accumulator for operands and results data
EBX:::Pointer to data in the DS segment
ECX:::Counter for string and loop operations
EDX:::I/O pointer
ESI:::Pointer to data in the segment pointed to by the DS register; source pointer for string operations
EDI:::Pointer to data (or destination) in the segment pointed to by the ES register; destination pointer for string operations
ESP:::Stack pointer (in the SS segment)
EBP:::Pointer to data on the stack (in the SS segment)
